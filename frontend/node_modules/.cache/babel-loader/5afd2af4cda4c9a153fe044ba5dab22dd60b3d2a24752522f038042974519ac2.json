{"ast":null,"code":"// Generic login for any role\nexport async function loginUser(email, password, role) {\n  const response = await fetch('/api/auth/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password,\n      role\n    })\n  });\n  if (!response.ok) throw new Error('Invalid credentials');\n  return response.json();\n}\n\n// Patient login (uses general auth endpoint)\nexport async function loginPatient(email, password) {\n  const response = await fetch('/api/auth/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password,\n      role: 'patient'\n    })\n  });\n  if (!response.ok) throw new Error('Invalid credentials');\n  return response.json();\n}\n\n// Donor login\nexport async function loginDonor(email, password) {\n  const response = await fetch('/api/donor/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!response.ok) throw new Error('Invalid credentials');\n  return response.json();\n}\n\n// Hospital login (uses general auth endpoint)\nexport async function loginHospital(email, password) {\n  const response = await fetch('/api/auth/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password,\n      role: 'hospital'\n    })\n  });\n  if (!response.ok) throw new Error('Invalid credentials');\n  return response.json();\n}\n\n// Admin login\nexport async function loginAdmin(email, password) {\n  const response = await fetch('/api/admin/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!response.ok) throw new Error('Invalid credentials');\n  return response.json();\n}\n\n// Patient signup\nexport async function signupPatient(data) {\n  const response = await fetch('/api/auth/register', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      ...data,\n      role: 'patient'\n    })\n  });\n  if (!response.ok) throw new Error('Registration failed');\n  return response.json();\n}\n\n// Donor signup\nexport async function signupDonor(data) {\n  const response = await fetch('/api/donor/register', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  if (!response.ok) throw new Error('Registration failed');\n  return response.json();\n}\n\n// Hospital signup (with file upload)\nexport async function signupHospital(data) {\n  const formData = new FormData();\n  for (const key in data) {\n    if (key === 'documents' && Array.isArray(data.documents)) {\n      data.documents.forEach(file => formData.append('documents', file));\n    } else {\n      formData.append(key, data[key]);\n    }\n  }\n  const response = await fetch('/api/hospital/register', {\n    method: 'POST',\n    body: formData\n  });\n  if (!response.ok) throw new Error('Registration failed');\n  return response.json();\n}","map":{"version":3,"names":["loginUser","email","password","role","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","loginPatient","loginDonor","loginHospital","loginAdmin","signupPatient","data","signupDonor","signupHospital","formData","FormData","key","Array","isArray","documents","forEach","file","append"],"sources":["C:/Users/USER/Desktop/Junky/Junky/frontend/src/services/auth.js"],"sourcesContent":["// Generic login for any role\r\nexport async function loginUser(email, password, role) {\r\n  const response = await fetch('/api/auth/login', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ email, password, role })\r\n  });\r\n  if (!response.ok) throw new Error('Invalid credentials');\r\n  return response.json();\r\n}\r\n\r\n// Patient login (uses general auth endpoint)\r\nexport async function loginPatient(email, password) {\r\n  const response = await fetch('/api/auth/login', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ email, password, role: 'patient' })\r\n  });\r\n  if (!response.ok) throw new Error('Invalid credentials');\r\n  return response.json();\r\n}\r\n\r\n// Donor login\r\nexport async function loginDonor(email, password) {\r\n  const response = await fetch('/api/donor/login', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ email, password })\r\n  });\r\n  if (!response.ok) throw new Error('Invalid credentials');\r\n  return response.json();\r\n}\r\n\r\n// Hospital login (uses general auth endpoint)\r\nexport async function loginHospital(email, password) {\r\n  const response = await fetch('/api/auth/login', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ email, password, role: 'hospital' })\r\n  });\r\n  if (!response.ok) throw new Error('Invalid credentials');\r\n  return response.json();\r\n}\r\n\r\n// Admin login\r\nexport async function loginAdmin(email, password) {\r\n  const response = await fetch('/api/admin/login', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ email, password })\r\n  });\r\n  if (!response.ok) throw new Error('Invalid credentials');\r\n  return response.json();\r\n}\r\n\r\n// Patient signup\r\nexport async function signupPatient(data) {\r\n  const response = await fetch('/api/auth/register', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ ...data, role: 'patient' })\r\n  });\r\n  if (!response.ok) throw new Error('Registration failed');\r\n  return response.json();\r\n}\r\n\r\n// Donor signup\r\nexport async function signupDonor(data) {\r\n  const response = await fetch('/api/donor/register', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(data)\r\n  });\r\n  if (!response.ok) throw new Error('Registration failed');\r\n  return response.json();\r\n}\r\n\r\n// Hospital signup (with file upload)\r\nexport async function signupHospital(data) {\r\n  const formData = new FormData();\r\n  for (const key in data) {\r\n    if (key === 'documents' && Array.isArray(data.documents)) {\r\n      data.documents.forEach((file) => formData.append('documents', file));\r\n    } else {\r\n      formData.append(key, data[key]);\r\n    }\r\n  }\r\n  const response = await fetch('/api/hospital/register', {\r\n    method: 'POST',\r\n    body: formData\r\n  });\r\n  if (!response.ok) throw new Error('Registration failed');\r\n  return response.json();\r\n} \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}